Kubeadm Installation on Ubuntu 20.04 Servers based on AWS cloud
---------------------------------------------------------------
1. One EC2 Instance  - K8sMaster              - t2.medium (This is not free tier will be charged)
2. Two EC2 Instances - K8sWorker1, K8sWorker2 - t2.micro

Execute the following commmands on all the three Instances (K8sMaster, K8sWorker1, K8sWorker2)
----------------------------------------------------------------------------------------------
*** Install CRI-O Container Runtime Engine ***
# Update the server
$ sudo apt update

# Ensure you load modules
$ sudo modprobe overlay
$ sudo modprobe br_netfilter

# Set up required sysctl params
$ sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# Reload sysctl
$ sudo sysctl --system

# Add Cri-o repo
$ sudo su -
$ OS="xUbuntu_20.04"
$ VERSION=1.23
$ echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
$ echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list
$ curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key add -
$ curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key add -

# Install CRI-O
$ sudo apt update
$ sudo apt install cri-o cri-o-runc

# Update CRI-O CIDR subnet
$ sudo sed -i 's/10.85.0.0/192.168.0.0/g' /etc/cni/net.d/100-crio-bridge.conf

# Start and enable Service
$ sudo systemctl daemon-reload
$ sudo systemctl restart crio
$ sudo systemctl enable crio
$ sudo systemctl status crio

# Update the server
$ sudo apt update

# Install kubelet, kubeadm and kubectl
$ sudo apt -y install curl apt-transport-https
$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
$ echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
$ sudo apt update
$ sudo apt -y install vim git curl wget kubelet kubeadm kubectl
$ sudo apt-mark hold kubelet kubeadm kubectl

# Confirm Installtion
$ kubectl version --client && kubeadm version

# Enable Kubelet
$ sudo systemctl enable kubelet

-------------------------------------------------
*** On K8sMaster Server ***
Execute the following commands only on K8sMaster
-------------------------------------------------
$ sudo kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock
$ sudo kubeadm init \
  --pod-network-cidr=192.168.0.0/16 \
  --cri-socket unix:///var/run/crio/crio.sock

# Copy the kubeadm join command to local - this command will help the nodes to join the K8s Cluster
# Do not copy the following command -> The following command is a sample of how your. kubeadm join command looks like
kubeadm join 172.31.11.144:6443 --token yd8lfh.2hewl72j0wqhsa98shas9 \
> --discovery-token-ca-cert-hash sha256:4b31bf553c06e87645d409df63750db2b44be99f6439ad748979y7887787
# Copy this command and execute this command on both the worker nodes - Now the nodes will join the K8s cluster

Again on the master node execute the following commands
As a root user
$ vi ~/.bashrc
At the end of this file add the following line
export KUBECONFIG=/etc/kubernetes/admin.conf
Save and exit the file and execute the following command
$ source ~/.bashrc

# Install Calico Network plugin on Master
$ kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml 
$ kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml

# If you want to execute the kubectl command using ubuntu user or other user login as that user and execute the following commands
$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

Execute the following commands and check if all the installations are successful or not
$ kubectl get nodes -w
Observe the status of the nodes as Ready (If they are not ready wait for sometime)
ctrl + c (To exit command)

$ kubectl get pods -A -w
Observe the status of all pods as Running (If any status is pending wait for sometime)

If all the nodes are Ready and all the Pods are Running then we can confirm we have a successful installation of K8s cluster using Kubeadm
